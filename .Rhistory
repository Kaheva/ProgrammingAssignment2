makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
View(makeVector)
View(makeVector)
View(makeVector)
View(makeVector)
View(makeVector)
View(makeVector)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
View(makeVector)
cacheinverse <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
matrix_to_invert <- x$get()
inv <- solve(matrix_to_invert, ...)
x$setinverse(inv)
inv
}
my_Matrix$set(matrix(c(2, 3, 1, 5), 2, 2))
my_Matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_Matrix$set(matrix(c(2, 3, 1, 5), 2, 2))
my_Matrix()
my_Matrix$get()
cacheinverse(my_Matrix)
cacheSolve <- function(x, ...) {
+     inv <- x$getinverse()
+     if(!is.null(inv)) {
+         message("getting cached data")
+         return(inv)
+     }
+     matrix_to_invert <- x$get()
+     inv <- solve(matrix_to_invert, ...)
+     x$setinverse(inv)
+     inv
+ }
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
cashSolve(my_Matrix)
cacheSolve(my_Matrix)
View(my_Matrix)
View(cacheinverse)
View(cacheSolve)
View(cacheinverse)
View(cacheSolve)
View(cacheinverse)
View(cacheinverse)
View(cacheSolve)
View(cacheinverse)
View(cacheSolve)
View(cacheinverse)
cacheSolve <- function(x, ...) {
+     +     inv <- x$getinverse()
+     if(!is.null(inv)) {
+         message("getting cached data")
+         return(inv)
+     }
+     data <- x$get()
+     inv <- solve(data, ...)
+     x$setinverse(inv)
+     inv
+ }
cacheSolve <- function(x, ...) {
+     inv <- x$getinverse()
+     if(!is.null(inv)) {
+         message("getting cached data")
+         return(inv)
+     }
+     data <- x$get()
+     inv <- solve(data, ...)
+     x$setinverse(inv)
+     inv
+ }
View(cacheSolve)
function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
View(cacheSolve)
View(cacheSolve)
View(cacheSolve)
View(makeCacheMatrix)
View(cacheSolve)
View(cacheSolve)
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
matrix_to_invert <- x$get()
inv <- solve(matrix_to_invert, ...)
x$setinverse(inv)
inv
}
View(cacheSolve)
View(cacheSolve)
View(makeCacheMatrix)
View(cacheSolve)
View(cacheinverse)
View(cacheinverse)
View(cacheinverse)
View(makeCacheMatrix)
